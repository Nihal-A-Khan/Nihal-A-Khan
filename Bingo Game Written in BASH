clear

if  [ -z "$1" -o ! -r "$1" ]
then
    echo "input file missing or unreadable" >/dev/stderr
    exit 1
fi

inputLines="wc -l "$1" | cut -d' ' -f1"
if  [ "$inputLines" != 6 ]
then
    echo "input file must have 6 lines" >/dev/stderr
    exit 2
fi

seedNum="cat $1 | head -1"
if  [ ${#seedNum} != 4 ]
then
    echo "seed line format error" >/dev/stderr
    exit 3
fi

if  [ "$#" -gt 1 ]
then
    echo "$0: exactly 1 argument expected" >/dev/stderr
    exit 5
fi
if  [ -r "$1" ]
then
    declare -A matrix
    num_rows=5
    num_columns=5
    hw=0
    seed="head -1 $1"
    RANDOM=$seed

    limiter1=0
    while read line
    do
       stringarray=($line)
       for ((i=1;i<=num_rows;i++))
       do
          for ((j=0;j<=num_columns;j++))
          do
             if  [ $limiter1 -eq $i ]
             then
                  matrix[$i,$j]=${stringarray[$j]}
             fi
          done
       done
       limiter1=$(($limiter1 + 1))
    done <$1

    countElem=0
    for x in ${matrix[@]}
    do
       if  [[ "$x" == [A-z] ]]
       then
            echo "card format error"
            exit 4
       elif [ "$x" -lt 00 -o "$x" -gt 75 ]
       then
            echo "card format error"
            exit 4
       elif [[ "$x" != [A-z] ]]
       then
           countElem=$(($countElem + 1))
       fi
    done
    if  [ $countElem -lt 25 ]
    then
        echo "card format error"
        exit 4
    fi
echo "CALL LIST: "
echo " L  I  N  U  X"
printMatrix ()
    {
      for ((i=1;i<=num_rows;i++))
      do
         for ((j=0;j<=num_columns;j++))
         do
            for x in ${matrix[$i,$j]}
            do
               if  [ ${matrix[$i,$j]} = "00" ]
               then
                   matrix[$i,$j]=${matrix[$i,$j]}"m"
               elif [[ ${matrix[$i,$j]} == $call ]]
               then
                   matrix[$i,$j]=$call"m"
               fi
            done
            echo -n "${matrix[$i,$j]} "
         done
         echo
      done
    }
    printMatrix
haswon()
    {
      a=0
      while [ $a -eq 0 ]
      do

          for ((i=0;i<=num_rows;i++))
          do
              count3=0
              for ((j=0;j<=num_columns;j++))
              do
                  if [ ${#matrix[$i,$j]} = 3 ]; then
                     count3=$(($count3 + 1))
                  fi
                  if [ $count3 -eq 5 ]; then
                  echo "WINNER"
                      hw=1
                      a=1
                      exit 0
                  fi
              done
          done
          for ((i=0;i<=num_columns;i++))
          do
              count4=0
              for ((j=0;j<=num_rows;j++))
              do
                  if [ ${#matrix[$j,$i]} = 3 ]; then
                      count4=$(($count4 + 1))
                  fi
                  if [ $count4 -eq 5 ]; then
                  echo "WINNER"
                      hw=1
                      a=1
                      exit 0
                  fi
              done
          done

          if [[ ${matrix[1,0]:2:3} == "m" ]] && [[ ${matrix[1,4]:2:3} == "m" ]] && [[ ${matrix[5,0]:2:3} == "m" ]] && [[ ${matrix[5,4]:2:3} == "m" ]]
          then
             echo "WINNER"
             hw=1
             a=1
             exit 0
          fi
          a=1
      done
    }
temp_call="CALL LIST: "
    callArray=()
    while [ $hw -eq 0 ]
    do
       count=1
       ger=0
       call=$((01 + $RANDOM % 75))

       while [ $count -eq 1 -a ${#callArray[@]} -le 75 -a $ger -eq 0 ]
       do
          for i in ${callArray[@]}
          do
             if  [ $call -eq $i ]
             then
                 ger=1
             fi
          done
          if  [ $ger -eq 1 ]
          then
              call=$((01 + $RANDOM % 75))
              ger=0
          else
              callArray+=("$call")
              count=0
          fi
       done
if  [ $call -ge 01 -a $call -le 09 ]
       then
           calledNumbers=" L0"$call
       elif  [ $call -ge 10 -a $call -le 15 ]
       then
           calledNumbers=" L"$call
       elif  [ $call -ge 16 -a $call -le 30 ]
       then
           calledNumbers=" I"$call
       elif  [ $call -ge 31 -a $call -le 45 ]
       then
           calledNumbers=" N"$call
       elif  [ $call -ge 46 -a $call -le 60 ]
       then
           calledNumbers=" U"$call
       elif  [ $call -ge 61 -a $call -le 75 ]
       then
           calledNumbers=" X"$call
       fi
read -p "enter any key to get a call or q to quit: " char
       if  [[ "$char" == [A-p] ]]
       then
           temp_call=$temp_call" "$calledNumbers
           clear
           echo $temp_call
           echo " L  I  N  U  X"
           for ((i=1;i<=num_rows;i++))
           do
              for ((j=0;j<=num_columns;j++))
              do
                 if  [[ ${matrix[$i,$j]} == "0"$call ]]
                 then
                     matrix[$i,$j]="0"$call"m"
                 elif [[ ${matrix[$i,$j]} == $call ]]
                 then
                     matrix[$i,$j]=$call"m"
                 fi
                 echo -n "${matrix[$i,$j]} "
              done
              printf '%s' "${array[@]}"; echo
           done
       haswon
       elif [[ "$char" == [R-z] ]]
       then
           temp_call=$temp_call" "$calledNumbers
           clear
           echo $temp_call
           echo " L  I  N  U  X"
           for ((i=1;i<=num_rows;i++))
           do
              for ((j=0;j<=num_columns;j++))
              do
                 if  [[ ${matrix[$i,$j]} == "0"$call ]]
                 then
                     matrix[$i,$j]="0"$call"m"
                 elif [[ ${matrix[$i,$j]} == $call ]]
                 then
                     matrix[$i,$j]=$call"m"
                 fi
                 echo -n "${matrix[$i,$j]} "
              done
              printf '%s' "${array[@]}"; echo
           done
       haswon
       elif [[ "$char" == "q" ]]
       then
            exit 0
       else
           echo "invalid key"
       fi
    done

fi
